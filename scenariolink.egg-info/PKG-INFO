Metadata-Version: 2.1
Name: scenariolink
Version: 0.0.0
Summary: Activity Browser plugin to download scenario-based LCA databases 
Home-page: https://github.com/polca/ScenarioLink
Author: Romain Sacchi, Marc van der Meide
Author-email: romain.sacchi@psi.ch, m.t.van.der.meide@cml.leidenuniv.nl
License:                    GNU LESSER GENERAL PUBLIC LICENSE
                               Version 3, 29 June 2007
        
         Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
        
          This version of the GNU Lesser General Public License incorporates
        the terms and conditions of version 3 of the GNU General Public
        License, supplemented by the additional permissions listed below.
        
          0. Additional Definitions.
        
          As used herein, "this License" refers to version 3 of the GNU Lesser
        General Public License, and the "GNU GPL" refers to version 3 of the GNU
        General Public License.
        
          "The Library" refers to a covered work governed by this License,
        other than an Application or a Combined Work as defined below.
        
          An "Application" is any work that makes use of an interface provided
        by the Library, but which is not otherwise based on the Library.
        Defining a subclass of a class defined by the Library is deemed a mode
        of using an interface provided by the Library.
        
          A "Combined Work" is a work produced by combining or linking an
        Application with the Library.  The particular version of the Library
        with which the Combined Work was made is also called the "Linked
        Version".
        
          The "Minimal Corresponding Source" for a Combined Work means the
        Corresponding Source for the Combined Work, excluding any source code
        for portions of the Combined Work that, considered in isolation, are
        based on the Application, and not on the Linked Version.
        
          The "Corresponding Application Code" for a Combined Work means the
        object code and/or source code for the Application, including any data
        and utility programs needed for reproducing the Combined Work from the
        Application, but excluding the System Libraries of the Combined Work.
        
          1. Exception to Section 3 of the GNU GPL.
        
          You may convey a covered work under sections 3 and 4 of this License
        without being bound by section 3 of the GNU GPL.
        
          2. Conveying Modified Versions.
        
          If you modify a copy of the Library, and, in your modifications, a
        facility refers to a function or data to be supplied by an Application
        that uses the facility (other than as an argument passed when the
        facility is invoked), then you may convey a copy of the modified
        version:
        
           a) under this License, provided that you make a good faith effort to
           ensure that, in the event an Application does not supply the
           function or data, the facility still operates, and performs
           whatever part of its purpose remains meaningful, or
        
           b) under the GNU GPL, with none of the additional permissions of
           this License applicable to that copy.
        
          3. Object Code Incorporating Material from Library Header Files.
        
          The object code form of an Application may incorporate material from
        a header file that is part of the Library.  You may convey such object
        code under terms of your choice, provided that, if the incorporated
        material is not limited to numerical parameters, data structure
        layouts and accessors, or small macros, inline functions and templates
        (ten or fewer lines in length), you do both of the following:
        
           a) Give prominent notice with each copy of the object code that the
           Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the object code with a copy of the GNU GPL and this license
           document.
        
          4. Combined Works.
        
          You may convey a Combined Work under terms of your choice that,
        taken together, effectively do not restrict modification of the
        portions of the Library contained in the Combined Work and reverse
        engineering for debugging such modifications, if you also do each of
        the following:
        
           a) Give prominent notice with each copy of the Combined Work that
           the Library is used in it and that the Library and its use are
           covered by this License.
        
           b) Accompany the Combined Work with a copy of the GNU GPL and this license
           document.
        
           c) For a Combined Work that displays copyright notices during
           execution, include the copyright notice for the Library among
           these notices, as well as a reference directing the user to the
           copies of the GNU GPL and this license document.
        
           d) Do one of the following:
        
               0) Convey the Minimal Corresponding Source under the terms of this
               License, and the Corresponding Application Code in a form
               suitable for, and under terms that permit, the user to
               recombine or relink the Application with a modified version of
               the Linked Version to produce a modified Combined Work, in the
               manner specified by section 6 of the GNU GPL for conveying
               Corresponding Source.
        
               1) Use a suitable shared library mechanism for linking with the
               Library.  A suitable mechanism is one that (a) uses at run time
               a copy of the Library already present on the user's computer
               system, and (b) will operate properly with a modified version
               of the Library that is interface-compatible with the Linked
               Version.
        
           e) Provide Installation Information, but only if you would otherwise
           be required to provide such information under section 6 of the
           GNU GPL, and only to the extent that such information is
           necessary to install and execute a modified version of the
           Combined Work produced by recombining or relinking the
           Application with a modified version of the Linked Version. (If
           you use option 4d0, the Installation Information must accompany
           the Minimal Corresponding Source and Corresponding Application
           Code. If you use option 4d1, you must provide the Installation
           Information in the manner specified by section 6 of the GNU GPL
           for conveying Corresponding Source.)
        
          5. Combined Libraries.
        
          You may place library facilities that are a work based on the
        Library side by side in a single library together with other library
        facilities that are not Applications and are not covered by this
        License, and convey such a combined library under terms of your
        choice, if you do both of the following:
        
           a) Accompany the combined library with a copy of the same work based
           on the Library, uncombined with any other library facilities,
           conveyed under the terms of this License.
        
           b) Give prominent notice with the combined library that part of it
           is a work based on the Library, and explaining where to find the
           accompanying uncombined form of the same work.
        
          6. Revised Versions of the GNU Lesser General Public License.
        
          The Free Software Foundation may publish revised and/or new versions
        of the GNU Lesser General Public License from time to time. Such new
        versions will be similar in spirit to the present version, but may
        differ in detail to address new problems or concerns.
        
          Each version is given a distinguishing version number. If the
        Library as you received it specifies that a certain numbered version
        of the GNU Lesser General Public License "or any later version"
        applies to it, you have the option of following the terms and
        conditions either of that published version or of any later version
        published by the Free Software Foundation. If the Library as you
        received it does not specify a version number of the GNU Lesser
        General Public License, you may choose any version of the GNU Lesser
        General Public License ever published by the Free Software Foundation.
        
          If the Library as you received it specifies that a proxy can decide
        whether future versions of the GNU Lesser General Public License shall
        apply, that proxy's public statement of acceptance of any version is
        permanent authorization for you to choose that version for the
        Library.
License-File: LICENSE.txt

# Activity Browser plugin : ScenarioLink

An Activity Browser plugin to fetch and reproduce scenario-based LCA databases (e.g., premise-generated databases).

# Content

- [Activity Browser](#activity-browser)
- [Test this plugin](#test-this-plugin)
- [Creating a plugin](#creating-a-plugin)
    - [Creating the repository](#creating-the-repository)
    - [Adding metadata](#adding-metadata)
        - [Plugin infos](#plugin-infos)
        - [Deploy to anaconda](#deploy-to-anaconda)
    - [Testing](#testing)
- [Plugin system documentation](#plugin-system-documentation)
- [Guidelines](#guidelines)

# Activity Browser

[The activity browser](https://github.com/LCA-ActivityBrowser/activity-browser) is an open source software for Life Cycle Assessment (LCA) that builds on top of the [Brightway2](https://brightway.dev) LCA framework.

# Test this plugin

- activate your Activity Browser conda environment
- install this plugin with conda :

```
conda install -c romainsacchi scenariolink
```

- start Activity Browser
- Select the plugin in plugins list

# Creating a plugin

This document will guide you through the process of creating a plugin for Activity Browser.

## Creating the repository

- Go to [this repository main page](https://github.com/Pan6ora/ab-plugin-Template) and click on `Use this template`
- Give your project a name (ideally something like `ab-plugin-MyPlugin`)
- Check the `Include all branches` box
- Create the repository

Once the repository is created you should clone it locally.

The repo should contain 2 branches:
- `main` which is a real plugin named Template and contains this documentation
- `template` which is the branch to be completed with your project infos

After cloning the repository you need to set it up to start from the `template` branch. This can be done with the following git commands:

```
git checkout main
git reset --hard template
git push -f
git branch -d template
git push origin --delete template
```

You should now have only one branch called `main` and containing the content of the old branch `template`.

## Adding metadata

The repository already contains some files to get you started:

- `.github` and `ci` folders to deploy your plugin to Anaconda
- `ScenarioLink` contains the plugin code
- `setup.py` file to create a python package
- basic CHANGELOG, LICENSE and README

Before starting to add functionalities to the plugin you need to fill some metadata.

### Plugin infos

- `ScenarioLink`
- `Plugin to fetch and locally reproduce scenario-based LCA databases`
- `https://github.com/polca/ScenarioLink`
- `m.t.van.der.meide@cml.leidenuniv.nl, romain.sacchi@psi.ch`
- `Marc van der Meide, Romain Sacchi`

### Deploy to Anaconda

In case you want to make your plugin available on the Anaconda repository you will need to set the appropriate repository secret on Github.

- Get an Anaconda token (with read and write API access) at anaconda.org/USERNAME/settings/access
- Add it to the Secrets of the Github repository as `CONDA_UPLOAD_TOKEN`

More infos about Anaconda deployment later.

## Testing 

A simple way to test your plugin is to use pip.

Open a terminal in your conda environment, go to your project folder and install your plugin in development mode with pip:

```
pip install -e .
```

Then start activity-browser and go to `Tools>Plugins` menu. Your plugin should appear in the list. Activate it and close the window. Two tabs should appear with your plugin name.

Once you've made some changes, restart Activity Browser to see the result.

## Adding content

Each plugin can add any content it wants into one left panel tab and one right panel tab.

While it seems logical for a plugin to use data and events from Activity Browser itself it is not necessary. On could create a totally different application and still deploy it as a plugin.

Following documentation will give you informations about the plugin structure and the way it can interact with Activity Browser.

See also the [guidelines](#guidelines) section to learn good practices.

# Plugin system documentation

This section is the documentation of the plugin system implemented in Activity Browser. It will hopefully help you to understand how to make your plugins work.

## Main characteristics

- A plugin is a conda package named ab-plugin-XXX
- A plugin can add any content in two tabs (Left/Right)
- Plugins connect to AB through signals
- Plugins can be selected per-project

## What a plugin can do

- adding content in the two tabs (sub-tabs, text, graphics...)
- adding wizards
- importing databases
- put stuff in the project folder
- connect to Activity Browser signals and generate them

## What a plugin can't do

- modifying other tabs or GUI parts

## Plugin content

**classes**

There are two main classes :

- `Plugin` is the main class defined in the init file of the plugin. It inherit from the `Plugin` class defined in Activity Browser.
- `PluginTab` is the mother class of every tabs the plugin will add to AB interface (one on each left/right panel).

**hooks**

The plugin class has 3 methods that are run by AB at a certain point :

- `load()` is run each time the plugin is added tp the project or reloaded. It kind of replaces the init method.
- `close()` is run when AB get closed.Put there the code to end your plugin properly.
- `remove()` is run when the plugin is removed from the current project. Use it to clean the place.

### Storage

**Plugins data**

Datas are added per-project. The plugin can add everything it needs in the project folder.

**Project plugins**

To keep track of plugins used in a project, an entry is added to project settings :

```json
/home/user/.local/share/Brigtway3/default.xxx/AB_project_settings.json
{
    "plugins_list": [
        "MyFirstPlugin",
        "MySecondPlugin"
    ],
    "read-only-databases": {
        "biosphere3": true,
        "Idemat": true
    }
}
```

# Guidelines

**Follow Activity Browser way of doing things**

We encourage you to follow th Activity Browser files tree structure and guidelines. This will help people working with it to understand your code.



## Hooks

The plugin class has 3 methods that are run by AB at a certain point :

- `load()` is run each time the plugin is added tp the project or reloaded. It kind of replaces the init method.
- `close()` is run when AB get closed.Put there the code to end your plugin properly.
- `remove()` is run when the plugin is removed from the current project. Use it to clean the place.
